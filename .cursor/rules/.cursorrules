# Cursor Rules for Music Collaboration Platform (MVP)

## Project Structure Verification
- **Pattern**: `**/*`
  ```yaml
  project_structure:
    frontend:
      - src/
        ├── components/     # Reusable UI components
        ├── pages/         # Page components
        ├── services/      # API services
        ├── utils/         # Helper functions
        ├── assets/        # Static assets
        └── styles/        # CSS and style files
    backend:
      - app/
        ├── api/          # API routes
        ├── core/         # Core functionality
        ├── db/           # Database
        ├── models/       # SQLAlchemy models
        ├── schemas/      # Pydantic schemas
        ├── services/     # Business logic
        └── utils/        # Utilities
  ```

## Environment Verification
- **Pattern**: `**/*.env*`
  ```yaml
  required_env:
    frontend:
      - VITE_API_URL
      - VITE_WEBSOCKET_URL
    backend:
      - DATABASE_URL
      - SECRET_KEY
      - CORS_ORIGINS
  ```
  - Never commit .env files
  - Always update .env.example
  - Verify all required variables

## Path Management
- **Pattern**: `**/*`
  ```yaml
  path_conventions:
    - Use relative imports within modules
    - Keep import depth <= 3 levels
    - Use index files for module exports
    - Maintain consistent path aliases
  ```

## Code Style and Quality
- **Pattern**: `**/*.{js,jsx,ts,tsx,py}`
  ```yaml
  style_rules:
    frontend:
      - ESLint configuration
      - Prettier formatting
      - TypeScript strict mode
    backend:
      - Black formatting
      - Ruff linting
      - MyPy type checking
  ```

## Database Management
- **Pattern**: `backend/app/db/**/*`
  ```yaml
  database_practices:
    - Verify migrations before applying
    - Keep migration files atomic
    - Document schema changes
    - Include rollback procedures
  ```

## Testing Strategy
- **Pattern**: `**/__tests__/**/*`
  ```yaml
  testing_requirements:
    - Unit tests for utilities
    - Integration tests for APIs
    - Component tests for UI
    - E2E tests for critical flows
  ```

## Development Workflow
- **Pattern**: `.git/*`
  ```yaml
  git_workflow:
    branches:
      - main: stable releases
      - develop: integration
      - feature/*: new features
    commits:
      - type(scope): description
      - types: feat, fix, docs, style, refactor
  ```

## Best Practices for AI Development

### Project Comprehension
```yaml
before_modifications:
  - Verify current architecture
  - Check existing patterns
  - Review related files
  - Understand dependencies
  - Check test coverage

during_development:
  - Follow established patterns
  - Maintain file organization
  - Update documentation
  - Add/update tests
  - Consider error handling

after_changes:
  - Verify functionality
  - Run test suite
  - Update documentation
  - Check for side effects
  - Review security implications
```

### Code Navigation
```yaml
file_organization:
  - Group related functionality
  - Use consistent naming
  - Maintain module boundaries
  - Document public APIs
  - Keep files focused

dependency_management:
  - Track direct dependencies
  - Minimize external deps
  - Version lock critical deps
  - Document requirements
  - Regular updates
```

## Security Basics
- **Pattern**: `**/*`
  ```yaml
  security_practices:
    - Input validation
    - Output sanitization
    - Authentication checks
    - Authorization rules
    - File upload limits
    - CORS configuration
  ```

{
    "version": 1,
    "rules": [
        {
            "name": "Frontend Development",
            "pattern": "frontend/src/**/*.{tsx,jsx,ts,js,css,scss}",
            "on_save": {
                "autoformat": true,
                "lint": true,
                "typecheck": true
            }
        },
        {
            "name": "Backend Development",
            "pattern": "backend/app/**/*.py",
            "on_save": {
                "autoformat": true,
                "lint": true,
                "typecheck": true
            }
        },
        {
            "name": "Test Files",
            "pattern": "**/__tests__/**/*.{ts,tsx,py}",
            "on_save": {
                "autoformat": true,
                "lint": true,
                "run_tests": true
            }
        },
        {
            "name": "Environment Files",
            "pattern": "**/*.env*",
            "on_save": {
                "message": "⚠️ Ensure no sensitive data is committed. Use environment variables for secrets."
            }
        },
        {
            "name": "Documentation",
            "pattern": "**/*.{md,mdx}",
            "on_save": {
                "autoformat": true,
                "spellcheck": true
            }
        }
    ],
    "global_rules": {
        "max_file_size_mb": 10,
        "indent_style": "space",
        "indent_size": 2,
        "end_of_line": "lf",
        "charset": "utf-8",
        "trim_trailing_whitespace": true,
        "insert_final_newline": true
    },
    "git_rules": {
        "branch_name_pattern": "^(feature|bugfix|hotfix|release|docs)/[a-z0-9-]+$",
        "commit_message_pattern": "^(feat|fix|docs|style|refactor|perf|test|chore|revert)(\\([a-z-]+\\))?: .+$",
        "protected_branches": ["main", "develop"],
        "require_linear_history": true
    },
    "ignore_patterns": [
        "node_modules/**",
        "**/*.pyc",
        "**/__pycache__/**",
        ".git/**",
        "dist/**",
        "build/**",
        "coverage/**"
    ]
}
